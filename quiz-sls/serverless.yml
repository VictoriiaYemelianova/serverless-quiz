service: quiz-sls

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  tableName: 'quizzes-table'
  questionsTable: 'questions-table'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["QuizzesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["QuestionsDynamoDBTable", "Arn" ] }
  environment:
    QUIZZES_TABLE: ${self:custom.tableName}
    QUESTIONS_TABLE: ${self:custom.questionsTable}

functions:
  getQuiz:
    handler: index.handler
    events:
      - http: 'GET /quizzes'
  createQuiz:
    handler: index.handler
    events:
      - http: 'POST /quiz'
  getQuestions:
    handler: index.handler
    events:
      - http: 'GET /questions/{proxy+}'
  createQuestion:
    handler: index.handler
    events:
      - http: 'POST /add-question'
      
resources:
  Resources:
    QuizzesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: quizId
            AttributeType: S
        KeySchema:
          -
            AttributeName: quizId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    QuestionsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: quizId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.questionsTable}
